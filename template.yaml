AWSTemplateFormatVersion: '2010-09-09'
Description: Despliegue de Fund Manager

Parameters:
  CreateDynamoDBTables:
    Type: String
    Description: "Especifica si se deben crear las tablas de DynamoDB (true) o si ya existen (false)"
    AllowedValues:
      - "true"
      - "false"
    Default: "true"

Conditions:
  CreateTablesCondition: !Equals [!Ref CreateDynamoDBTables, "true"]

Resources:
  FundManagerBackendInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: fund-manager
      ImageId: ami-0a91cd140a1fc148a
      SecurityGroupIds:
        - !Ref BackendSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Join
          - ''
          - - "#!/bin/bash\n"
            - "yum update -y\n"
            - "yum install -y python3 git\n"
            - "amazon-linux-extras install docker -y\n"
            - "service docker start\n"
            - "usermod -a -G docker ec2-user\n"
            - "curl -sSL https://get.docker.com/ | sh\n"
            - "systemctl start docker\n"
            - "systemctl enable docker\n"
            - "# Instalar aws-cli\n"
            - "yum install -y aws-cli\n"
            - "# Clonar el repositorio\n"
            - "git clone https://github.com/SebastianCl/fund_manager-back.git\n"
            - "cd fund_manager-back\n"
            - "# Obtener las variables de entorno desde Parameter Store\n"
            - "VARIABLES=(VERSION GMAIL_FROM_EMAIL GMAIL_EMAIL_PASSWORD GMAIL_SMTP_SERVER GMAIL_SMTP_PORT TWILIO_ACCOUNT_SID TWILIO_AUTH_TOKEN TWILIO_PHONE aws_access_key_id aws_secret_access_key region_name)\n"
            - "ENV_FILE=\"/home/ec2-user/.env\"\n"
            - "touch $ENV_FILE\n"
            - "# Obtener cada variable de Parameter Store y agregarla al archivo .env\n"
            - "for VAR in \"${VARIABLES[@]}\"\n"
            - "do\n"
            - "  VALUE=$(aws ssm get-parameter --name \"$VAR\" --with-decryption --query \"Parameter.Value\" --output text --region "
            - !Ref "AWS::Region"
            - ")\n"
            - "  echo \"$VAR=$VALUE\" >> $ENV_FILE\n"
            - "done\n"
            - "echo \"Archivo .env creado con éxito en /home/ec2-user/.env\"\n"
            - "# Ejecutar la aplicación\n"
            - "pip3 install -r requirements.txt\n"
            - "uvicorn main:app --host 0.0.0.0 --port 80\n"

  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref EC2Role

  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'ParameterStoreAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:GetParameter'
                Resource: 'arn:aws:ssm:*:*:parameter/*'
        - PolicyName: 'S3FullAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: '*'

  BackendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permitir acceso HTTP y SSH
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0

  DynamoDBTableTransaction:
    Type: AWS::DynamoDB::Table
    Condition: CreateTablesCondition
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      TableName: transaction
      AttributeDefinitions:
        - AttributeName: transaction_id
          AttributeType: S
      KeySchema:
        - AttributeName: transaction_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  DynamoDBTableUser:
    Type: AWS::DynamoDB::Table
    Condition: CreateTablesCondition
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      TableName: user
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: N
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  DynamoDBTableFund:
    Type: AWS::DynamoDB::Table
    Condition: CreateTablesCondition
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      TableName: fund
      AttributeDefinitions:
        - AttributeName: fund_id
          AttributeType: N
      KeySchema:
        - AttributeName: fund_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  FrontendS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: fund-manager-front
      WebsiteConfiguration:
        IndexDocument: index.html

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: "arn:aws:s3:::fund-manager-front/*"
